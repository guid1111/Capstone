version: 2.1

orbs:
    aws-cli: circleci/aws-cli@4.0
    aws-ecr: circleci/aws-ecr@8.1.3
    k8s: circleci/kubernetes@1.3.1

jobs:
  build-and-test-option-pricer:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:      
      - checkout:
          path: ~/Capstone      
      - run:          
          working_directory: ~/Capstone
          name: Build and Run tests
          command: |                                    
            dotnet test Capstone.sln --configuration Release

  deploy-application:    
    docker:
      #We need an image with eksclt and kubectl commands!  Or we need install those tools.
      #unless 
      - image: amazon/aws-cli
    steps:
      - checkout:
          path: ~/
      # - run:
      #     name: install jq
      #     command: |                  
      #       apt install jq              
      #May need to do this:
      #command:|
      #aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}
      - k8s/install-kubectl
      - run:           
          name: Deploy cluster if deploy cluster if required
          ##EKS NOT FOUND
          # MAybe just use this:
          #https://circleci.com/developer/orbs/orb/circleci/aws-eks
          #you can pass config file...
          #OR move install kutcl command above create cluster - try this first!!
          command: |
            DEPLOYED_CLUSTER=$(aws eks list-clusters | grep option-pricer-cluster || true)
            if [ "$DEPLOYED_CLUSTER" != "" ]; then
              echo "Cluster $DEPLOYED_CLUSTER is already deployed."              
            else
              eksctl create cluster -f eksctl_cluster_config.yml
            fi
      
      - run:
          name: Deploy deploy-application
          command: |
            #TODO - need to get the name / tag of the container right...
            sed -i 's/IMAGE_TOKEN/$CIRCLE_SHA1/g' deployment-manifest.yml
            kutctl apply -f deployment-manifest.yml
            kubctl apply -f service-manifest.yml

            # Smoke test + rollback to previous container version??

workflows:
  default:
    jobs:  
      - build-and-test-option-pricer
      - aws-ecr/build-and-push-image:
          requires: [build-and-test-option-pricer]
          context: aws-dev
          dockerfile: Dockerfile
          path: OptionPricer
          repo: capstone
          tag: "$CIRCLE_SHA1" 
      - deploy-application:
          requires: [aws-ecr/build-and-push-image]      