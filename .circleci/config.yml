version: 2.1

orbs:
    aws-cli: circleci/aws-cli@4.0
    aws-ecr: circleci/aws-ecr@8.1.3
    aws-eks: circleci/aws-eks@2.2.0    
    k8s: circleci/kubernetes@1.3.1

commands:
  install_eksctl:    
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            yum install -y tar gzip            
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download      

      


jobs:
  build-and-test-option-pricer:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:      
      - checkout:
          path: ~/Capstone      
      - run:          
          working_directory: ~/Capstone
          name: Build and Run tests
          command: |                                    
            dotnet test Capstone.sln --configuration Release

  deploy-application:    
    docker:
      #We need an image with eksclt and kubectl commands!  Or we need install those tools.
      #unless 
      - image: amazon/aws-cli

#- when:
#condition:
 #           or:
  #            - equal:[0, 0]
   #       steps:
    #        - run:
     #           command: echo "conditional"

    steps:  
      - checkout          
      - install_eksctl      
      - k8s/install-kubectl
      # - run:
      #     name: install jq
      #     command: |                  
      #       apt install jq              
      #May need to do this:
      #command:|
      #aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}    
      - run:           
          name: Deploy cluster if deploy cluster if required
          command: |
            cd ~/project
            DEPLOYED_CLUSTER=$(aws eks list-clusters | grep option-pricer-cluster || true)
            if [ "$DEPLOYED_CLUSTER" != "" ]; then              
              echo "Cluster $DEPLOYED_CLUSTER is already deployed."              
              #DEPLOYED=1
            else
              echo "Cluster is not deployed."              
              #eksctl
              #DEPLOYED=0
              eksctl create cluster -f eksctl_cluster_config.yml
            fi

      - run:
          name: Deploy deploy-application
          command: |
            #TODO - need to get the name / tag of the container right...
            cd ~/project
            sed -i 's/IMAGE_TOKEN/$CIRCLE_SHA1/g' deployment-manifest.yml
            kutctl apply -f deployment-manifest.yml
            kubctl apply -f service-manifest.yml
      
      
      # - run:           
      #     name: Deploy cluster if deploy cluster if required
      #     ##EKS NOT FOUND
      #     # MAybe just use this:
      #     #https://circleci.com/developer/orbs/orb/circleci/aws-eks
      #     #you can pass config file...
      #     #OR move install kutcl command above create cluster - try this first!!
      #     command: |
      #       DEPLOYED_CLUSTER=$(aws eks list-clusters | grep option-pricer-cluster || true)
      #       if [ "$DEPLOYED_CLUSTER" != "" ]; then              
      #         echo "Cluster $DEPLOYED_CLUSTER is already deployed."              
      #         DEPLOYED=1
      #       else
      #         echo "Cluster is not deployed."              
      #         DEPLOYED=0
      #         #eksctl create cluster -f eksctl_cluster_config.yml
      #       fi
      
      # when:
      #   condition:
      #     or:
      #       - equal: [DEPLOYED == 0]
      #   steps:
      #       - aws-eks/create-cluster:
      #           config-file: eksctl_cluster_config.yml
    
      # - run:
      #     name: Deploy deploy-application
      #     command: |
      #       #TODO - need to get the name / tag of the container right...
      #       sed -i 's/IMAGE_TOKEN/$CIRCLE_SHA1/g' deployment-manifest.yml
      #       kutctl apply -f deployment-manifest.yml
      #       kubctl apply -f service-manifest.yml

      #       # Smoke test + rollback to previous container version??

workflows:
  default:
    jobs:  
      - build-and-test-option-pricer
      - aws-ecr/build-and-push-image:
          requires: [build-and-test-option-pricer]
          context: aws-dev
          dockerfile: Dockerfile
          path: OptionPricer
          repo: capstone
          tag: "$CIRCLE_SHA1" 
      - deploy-application:
          requires: [aws-ecr/build-and-push-image]      