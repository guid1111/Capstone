version: 2.1

orbs:
    aws-cli: circleci/aws-cli@4.0
    aws-ecr: circleci/aws-ecr@8.1.3
    aws-eks: circleci/aws-eks@2.2.0    
    k8s: circleci/kubernetes@1.3.1

commands:
  install_eksctl:    
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            yum install -y tar gzip            
            mkdir -p eksctl_temp
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C eksctl_temp
            chmod +x eksctl_temp/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_temp/eksctl /usr/local/bin/
            rmdir eksctl_temp      

jobs:
  lint-and-test-option-pricer:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:      
      - checkout:
          path: ~/Capstone      
      - run:          
          working_directory: ~/Capstone
          name: Lint (using StyleCop), build and run unit tests
          command: |                                    
            dotnet test Capstone.sln --configuration Release

  deploy-application:    
    docker:      
      - image: amazon/aws-cli
    steps:  
      - checkout          
      - install_eksctl      
      - k8s/install-kubectl      
      - run:           
          name: Deploy cluster if deploy cluster if required
          command: |
            cd ~/project
            DEPLOYED_CLUSTER=$(aws eks list-clusters | grep option-pricer-cluster || true)
            if [ "$DEPLOYED_CLUSTER" != "" ]; then              
              echo "Cluster option-pricer-cluster is already deployed."              
            else
              echo "option-pricer-cluster is not deployed.  Creating Cluster..."                            
              eksctl create cluster -f eksctl_cluster_config.yml
            fi

      - run:
          name: Deploy deploy-application
          command: |            
            cd ~/project
            aws eks --region us-east-1 update-kubeconfig --name option-pricer-cluster
            sed -i 's/IMAGE_TOKEN/'"${CIRCLE_SHA1}"'/g' deployment-manifest.yml
            kubectl apply -f deployment-manifest.yml
            kubectl apply -f service-manifest.yml
  
  smoke-test:
    docker:      
      - image: amazon/aws-cli
    steps:        
      - install_eksctl      
      - k8s/install-kubectl      
      - run:
          name: Smoke test the application
          command: |  
            aws eks --region us-east-1 update-kubeconfig --name option-pricer-cluster
            LOAD_BALANCER_IP=$(kubectl get services -l component=controller,app=nginx-ingress -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}")
            API_URL="http://"$LOAD_BALANCER_IP"/OptionPrice/Currencies"
            echo "API_URL = ${API_URL}"
            if curl -s $API_URL | grep "EURUSD"
            then              
              exit 0
            else
              exit 1
            fi

workflows:
  default:
    jobs:  
      - lint-and-test-option-pricer
      - aws-ecr/build-and-push-image:
          requires: [lint-and-test-option-pricer]
          context: aws-dev
          dockerfile: Dockerfile
          path: OptionPricer
          repo: capstone
          tag: "$CIRCLE_SHA1" 
      - deploy-application:
          requires: [aws-ecr/build-and-push-image]      
      - smoke-test:
          requires: [deploy-application]


          #TODO - Add smoke test
          # Get ip:
  #         kubectl get services \
  #  --namespace ingress-nginx \
  #  nginx-ingress-controller \
  #  --output jsonpath='{.status.loadBalancer.ingress[0].ip}'

  #kubectl get services -l component=controller,app=nginx-ingress -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"

  # And use Curl...
  # Add a comment to say if we were so inclined we could rollback to a previous versions of the container until one is found that passes the smoketest.